diff --git a/eslint.config.js b/eslint.config.js
index 722941a..9dc1472 100644
--- a/eslint.config.js
+++ b/eslint.config.js
@@ -33,9 +33,10 @@ export default defineConfig([
       "prettier/prettier": "warn",
 
       "react/react-in-jsx-scope": "off",
-      "spellcheck/spell-checker": "off",
-      "@typescript-eslint/no-unused-vars": "warn",
-      "no-unused-vars": "off",
+      // 이거 지우기
+      // "spellcheck/spell-checker": "off",
+      // "@typescript-eslint/no-unused-vars": "warn",
+      // "no-unused-vars": "off",
     },
     settings: {
       react: {
diff --git a/index.html b/index.html
index 0b94834..c2cb9d7 100644
--- a/index.html
+++ b/index.html
@@ -2,7 +2,8 @@
 <html lang="en">
   <head>
     <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
+    <link rel="icon" type="image/png" href="/favicon.png" />
+    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
     <link
       rel="stylesheet"
       as="style"
@@ -18,22 +19,38 @@
       rel="stylesheet"
       href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=star"
     />
+    <script
+      type="text/javascript"
+      src="//dapi.kakao.com/v2/maps/sdk.js?appkey=51626d448b879e04dbc29efa6fb0f2d2"
+    ></script>
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-    <title>어다가냥?같이가개!</title>
+    <!-- 메타데이터 -->
+    <title>어다가냥?같이가개! | 반려동물과 함께하는 생활</title>
+    <meta name="description" content="어디가냥?같이가개! 메인 페이지" />
+    <meta
+      property="og:title"
+      content="어다가냥?같이가개! | 반려동물과 함께하는 생활"
+    />
+    <meta property="og:description" content="어디가냥?같이가개!" />
+    <meta
+      property="og:image"
+      content="/assets/images/common/og_thumbnail.jpg"
+    />
+    <meta property="og:type" content="website" />
+
+    <meta name="twitter:card" content="summary_large_image" />
+    <meta
+      name="twitter:title"
+      content="어다가냥?같이가개! | 반려동물과 함께하는 생활"
+    />
+    <meta name="twitter:description" content="어디가냥?같이가개!" />
+    <meta
+      name="twitter:image"
+      content="/assets/images/common/og_thumbnail.jpg"
+    />
   </head>
   <body>
     <div id="root"></div>
     <script type="module" src="/src/main.tsx"></script>
-    <!-- Kakao Map SDK를 비동기로 로드하여 document.write 경고 방지 -->
-    <script>
-      (function () {
-        var script = document.createElement("script");
-        script.type = "text/javascript";
-        script.src =
-          "//dapi.kakao.com/v2/maps/sdk.js?appkey=51626d448b879e04dbc29efa6fb0f2d2";
-        script.async = true;
-        document.head.appendChild(script);
-      })();
-    </script>
   </body>
 </html>
diff --git a/src/components/mainPage/AiRecSection.tsx b/src/components/mainPage/AiRecSection.tsx
index 57e8c21..9bfcaa9 100644
--- a/src/components/mainPage/AiRecSection.tsx
+++ b/src/components/mainPage/AiRecSection.tsx
@@ -2,24 +2,59 @@ import { useState, useRef, useEffect } from "react";
 import AiRecCard from "./AiRecCard";
 
 const AiRecList = () => {
-  const testAiRec = [1, 2, 3, 4, 5];
-
+  // 실제 AI 추천 데이터를 가져오는 로직으로 변경 필요
+  const [aiRecData, setAiRecData] = useState<number[]>([]);
   const [index, setIndex] = useState(0);
   const timeoutRef = useRef<NodeJS.Timeout | null>(null);
-  const max = testAiRec.length;
+
+  // AI 추천 데이터를 가져오는 함수
+  const fetchAiRecData = async () => {
+    try {
+      // 실제 API 호출로 변경 필요
+      // const response = await fetch('/api/ai-recommendations');
+      // const data = await response.json();
+      // setAiRecData(data);
+
+      // 임시로 빈 배열 설정
+      setAiRecData([]);
+    } catch (error) {
+      console.error("AI 추천 데이터를 가져오는데 실패했습니다:", error);
+      setAiRecData([]);
+    }
+  };
+
+  useEffect(() => {
+    fetchAiRecData();
+  }, []);
 
   useEffect(() => {
+    if (aiRecData.length === 0) return;
+
     timeoutRef.current = setTimeout(() => {
-      setIndex((prev) => (prev + 1) % max);
+      setIndex((prev) => (prev + 1) % aiRecData.length);
     }, 5000);
 
     return () => {
       if (timeoutRef.current) clearTimeout(timeoutRef.current);
     };
-  }, [index, max]);
+  }, [index, aiRecData.length]);
 
   const handleIndicatorClick = (i: number) => setIndex(i);
 
+  // 데이터가 없으면 로딩 상태 표시
+  if (aiRecData.length === 0) {
+    return (
+      <section className="flex flex-col gap-[24px] w-full h-[483px] py-[36px]">
+        <p className="text-[32px] font-dunggeunmiso font-bold text-[var(--main-color)]">
+          AI 추천
+        </p>
+        <div className="h-[304px] w-[1200px] mx-auto relative rounded-[14px] overflow-hidden flex items-center justify-center">
+          <p className="text-gray-500">AI 추천 데이터를 불러오는 중...</p>
+        </div>
+      </section>
+    );
+  }
+
   return (
     <section className="flex flex-col gap-[24px] w-full h-[483px] py-[36px]">
       <p className="text-[32px] font-dunggeunmiso font-bold text-[var(--main-color)]">
@@ -31,10 +66,10 @@ const AiRecList = () => {
           className="flex transition-transform duration-700 ease-in-out"
           style={{
             transform: `translateX(-${index * 1200}px)`,
-            width: `${100 * max}%`,
+            width: `${100 * aiRecData.length}%`,
           }}
         >
-          {testAiRec.map((rec) => (
+          {aiRecData.map((rec) => (
             <div key={rec} className="w-[1200px] flex-shrink-0">
               <AiRecCard desc={"요즘 같은 날엔 루프탑 파티 " + rec} />
             </div>
@@ -43,7 +78,7 @@ const AiRecList = () => {
       </div>
       {/* 인디케이터 */}
       <div className="flex gap-[24px] w-full h-[8px]">
-        {testAiRec.map((_, i) => (
+        {aiRecData.map((_, i) => (
           <button
             key={i}
             className={`h-full w-[220px] rounded-[16px] transition-colors duratin-500 ${i === index ? "bg-[var(--main-color)]" : "bg-[var(--main-color-sub)]"} cursor-pointer`}
diff --git a/src/components/mypage/ImageUploadSection.tsx b/src/components/mypage/ImageUploadSection.tsx
index c08cbe5..3bf970f 100644
--- a/src/components/mypage/ImageUploadSection.tsx
+++ b/src/components/mypage/ImageUploadSection.tsx
@@ -8,6 +8,7 @@ interface ImageUploadSectionProps {
   onSave: () => void;
   onCancel: () => void;
   maxFiles?: number;
+  minFiles?: number;
 }
 
 const ImageUploadSection = ({
@@ -17,6 +18,7 @@ const ImageUploadSection = ({
   onSave,
   onCancel,
   maxFiles = 3,
+  minFiles = 0,
 }: ImageUploadSectionProps) => {
   const fileInputRef = useRef<HTMLInputElement>(null);
 
@@ -32,6 +34,14 @@ const ImageUploadSection = ({
     }
   };
 
+  const handleSave = () => {
+    if (selectedFiles.length < minFiles) {
+      alert(`최소 ${minFiles}개 이상의 이미지를 업로드해주세요.`);
+      return;
+    }
+    onSave();
+  };
+
   return (
     <div className="mb-8">
       <input
@@ -50,6 +60,7 @@ const ImageUploadSection = ({
         />
         <span className="text-gray-600">
           {selectedFiles.length}/{maxFiles}
+          {minFiles > 0 && ` (최소 ${minFiles}개 필수)`}
         </span>
       </div>
 
@@ -74,7 +85,7 @@ const ImageUploadSection = ({
       )}
 
       <div className="w-[94.5%] flex justify-end gap-4 mt-[68px]">
-        <PageButton text="저장하기" variant="default" onClick={onSave} />
+        <PageButton text="저장하기" variant="default" onClick={handleSave} />
         <PageButton text="취소하기" variant="default" onClick={onCancel} />
       </div>
     </div>
diff --git a/src/components/mypage/NicknameSection.tsx b/src/components/mypage/NicknameSection.tsx
index 4d44db5..dde7108 100644
--- a/src/components/mypage/NicknameSection.tsx
+++ b/src/components/mypage/NicknameSection.tsx
@@ -42,6 +42,7 @@ const NicknameSection = () => {
       await updateUserProfile(accessToken, nickname.trim());
 
       // 성공 시 로컬 상태 업데이트
+      // 이거 빼고 fetch 해서 업데이트 해야함
       setUser({
         ...user,
         name: nickname.trim(),
diff --git a/src/components/mypage/RecentPlaces.tsx b/src/components/mypage/RecentPlaces.tsx
index 2d65efd..7cb35af 100644
--- a/src/components/mypage/RecentPlaces.tsx
+++ b/src/components/mypage/RecentPlaces.tsx
@@ -1,5 +1,6 @@
 import { useEffect, useState } from "react";
 import { IoChevronBack, IoChevronForward } from "react-icons/io5";
+import { useAuthStore } from "@/stores/authStore";
 
 interface RecentItem {
   id: number;
@@ -12,6 +13,7 @@ interface RecentItem {
 }
 
 const RecentPlaces = () => {
+  const { accessToken } = useAuthStore();
   const [recentList, setRecentList] = useState<RecentItem[]>([]);
   const [currentIndex, setCurrentIndex] = useState(0);
   const [isLoading, setIsLoading] = useState(false);
@@ -49,7 +51,7 @@ const RecentPlaces = () => {
         credentials: "include",
         headers: {
           "Content-Type": "application/json",
-          Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
+          Authorization: `Bearer ${accessToken}`,
         },
       });
 
diff --git a/src/components/mypage/ReviewList.tsx b/src/components/mypage/ReviewList.tsx
index 83a15d8..b8f6ca8 100644
--- a/src/components/mypage/ReviewList.tsx
+++ b/src/components/mypage/ReviewList.tsx
@@ -1,5 +1,6 @@
 import { useState, useEffect } from "react";
 import ReviewItem from "@/components/mypage/ReviewItem";
+import { useAuthStore } from "@/stores/authStore";
 
 // 더미 리뷰 데이터
 const dummyReviews = [
@@ -21,6 +22,7 @@ const dummyReviews = [
 ];
 
 const ReviewList = () => {
+  const { accessToken } = useAuthStore();
   const [reviews, setReviews] = useState(dummyReviews);
   const [editingId, setEditingId] = useState<number | null>(null);
   const [editText, setEditText] = useState("");
@@ -31,25 +33,55 @@ const ReviewList = () => {
   }, []);
 
   const loadReviews = async () => {
+    if (!accessToken) {
+      console.log("accessToken이 없어서 더미 데이터를 사용합니다.");
+      setReviews(dummyReviews);
+      return;
+    }
+
     try {
-      const response = await fetch(
+      // 여러 가능한 API 엔드포인트 시도
+      const possibleEndpoints = [
+        `${import.meta.env.VITE_API_BASE_URL}api/reviews`,
+        `${import.meta.env.VITE_API_BASE_URL}api/user/reviews`,
         `${import.meta.env.VITE_API_BASE_URL}api/review/`,
-        {
-          method: "GET",
-          credentials: "include",
-          headers: {
-            "Content-Type": "application/json",
-            Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
-          },
+        `${import.meta.env.VITE_API_BASE_URL}api/my/reviews`,
+      ];
+
+      let response = null;
+      let data = null;
+
+      for (const endpoint of possibleEndpoints) {
+        try {
+          console.log(`API 엔드포인트 시도: ${endpoint}`);
+
+          response = await fetch(endpoint, {
+            method: "GET",
+            credentials: "include",
+            headers: {
+              "Content-Type": "application/json",
+              Authorization: `Bearer ${accessToken}`,
+            },
+          });
+
+          if (response.ok) {
+            console.log(`성공한 엔드포인트: ${endpoint}`);
+            break;
+          } else {
+            console.log(
+              `엔드포인트 실패: ${endpoint}, 상태: ${response.status}`
+            );
+          }
+        } catch (endpointError) {
+          console.log(`엔드포인트 오류: ${endpoint}`, endpointError);
+          continue;
         }
-      );
-
-      if (!response.ok) {
-        const errorText = await response.text();
-        console.error("API 에러 응답:", errorText);
-        throw new Error(
-          `HTTP error! status: ${response.status}, message: ${errorText}`
-        );
+      }
+
+      if (!response || !response.ok) {
+        console.log("모든 API 엔드포인트가 실패하여 더미 데이터를 사용합니다.");
+        setReviews(dummyReviews);
+        return;
       }
 
       // 응답이 JSON인지 확인
@@ -57,25 +89,31 @@ const ReviewList = () => {
       if (!contentType || !contentType.includes("application/json")) {
         const responseText = await response.text();
         console.error("JSON이 아닌 응답:", responseText);
-        throw new Error("API가 JSON을 반환하지 않습니다");
+        console.log("더미 데이터를 사용합니다.");
+        setReviews(dummyReviews);
+        return;
       }
 
-      const data = await response.json();
+      data = await response.json();
+      console.log("API 응답 데이터:", data);
 
       // API 응답 구조에 따라 데이터 설정
-      const reviewData = data?.data || data?.reviews || data;
+      const reviewData = data?.data || data?.reviews || data?.content || data;
       if (reviewData && Array.isArray(reviewData) && reviewData.length > 0) {
+        console.log("API에서 받은 리뷰 데이터 사용");
         setReviews(reviewData);
       } else if (reviewData && !Array.isArray(reviewData)) {
         // 단일 객체인 경우 배열로 변환
+        console.log("단일 리뷰 객체를 배열로 변환");
         setReviews([reviewData]);
       } else {
-        setReviews([]);
+        console.log("API 응답이 비어있어서 더미 데이터 사용");
+        setReviews(dummyReviews);
       }
     } catch (error) {
       console.error("리뷰 목록 로드 실패:", error);
-      // 에러가 발생해도 UI는 그대로 유지
-      setReviews([]);
+      console.log("에러 발생으로 더미 데이터를 사용합니다.");
+      setReviews(dummyReviews);
     }
   };
 
diff --git a/src/components/mypage/ReviewWriteForm.tsx b/src/components/mypage/ReviewWriteForm.tsx
index 7955c6c..fe59369 100644
--- a/src/components/mypage/ReviewWriteForm.tsx
+++ b/src/components/mypage/ReviewWriteForm.tsx
@@ -3,11 +3,13 @@ import { useNavigate, useLocation, useParams } from "react-router-dom";
 import StarRating from "./StarRating";
 import ImageUploadSection from "./ImageUploadSection";
 import ConfirmModal from "./ConfirmModal";
+import { useAuthStore } from "@/stores/authStore";
 
 const ReviewWriteForm = () => {
   const location = useLocation();
   const navigate = useNavigate();
   const { contentId } = useParams();
+  const { accessToken } = useAuthStore();
   const reviewData = location.state?.reviewData;
 
   // URL에서 contentId 추출
@@ -21,7 +23,7 @@ const ReviewWriteForm = () => {
     reviewText: reviewData?.review || "",
     placeName: reviewData?.place || "장소명",
     isLoading: false,
-    errors: { rating: "", reviewText: "", placeName: "" },
+    errors: { rating: "", reviewText: "", placeName: "", images: "" },
     isValid: false,
   });
 
@@ -51,8 +53,16 @@ const ReviewWriteForm = () => {
         formState.reviewText.trim() === "" ? "리뷰 내용을 입력해주세요." : "",
       placeName:
         formState.placeName === "장소명" ? "장소 정보를 찾을 수 없습니다." : "",
+      images:
+        selectedFiles.length === 0
+          ? "이미지를 최소 1개 이상 업로드해주세요."
+          : "",
     };
-    const isValid = !errors.rating && !errors.reviewText && !errors.placeName;
+    const isValid =
+      !errors.rating &&
+      !errors.reviewText &&
+      !errors.placeName &&
+      !errors.images;
     updateErrors(errors);
     updateFormState({ isValid });
     return isValid;
@@ -60,11 +70,20 @@ const ReviewWriteForm = () => {
 
   // 장소 정보 로드
   const loadPlaceInfo = async () => {
-    if (!finalContentId || isNaN(Number(finalContentId))) return;
+    if (!finalContentId || isNaN(Number(finalContentId)) || !accessToken) {
+      console.log("장소 정보 로드 조건 확인:", {
+        finalContentId,
+        accessToken: !!accessToken,
+      });
+      return;
+    }
+
     try {
       updateFormState({ isLoading: true });
       let placeData = null;
 
+      console.log("장소 정보 로드 시작, contentId:", finalContentId);
+
       // /api/place/{contentId} 시도
       let response = await fetch(
         `${import.meta.env.VITE_API_BASE_URL}api/place/${finalContentId}`,
@@ -73,15 +92,19 @@ const ReviewWriteForm = () => {
           credentials: "include",
           headers: {
             "Content-Type": "application/json",
-            Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
+            Authorization: `Bearer ${accessToken}`,
           },
         }
       );
 
+      console.log("첫 번째 API 응답 상태:", response.status);
+
       if (response.ok) {
         const data = await response.json();
+        console.log("첫 번째 API 응답 데이터:", data);
         placeData = data?.data || data?.place || data;
       } else {
+        console.log("첫 번째 API 실패, 두 번째 API 시도");
         // /api/content/search 시도
         const searchResponse = await fetch(
           `${import.meta.env.VITE_API_BASE_URL}api/content/search?contentId=${finalContentId}`,
@@ -90,17 +113,24 @@ const ReviewWriteForm = () => {
             credentials: "include",
             headers: {
               "Content-Type": "application/json",
-              Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
+              Authorization: `Bearer ${accessToken}`,
             },
           }
         );
+
+        console.log("두 번째 API 응답 상태:", searchResponse.status);
+
         if (!searchResponse.ok)
           throw new Error(`검색 API 실패: ${searchResponse.status}`);
         const searchData = await searchResponse.json();
+        console.log("두 번째 API 응답 데이터:", searchData);
         placeData = searchData?.data || searchData?.content || searchData;
       }
 
+      console.log("추출된 장소 데이터:", placeData);
       const newPlaceName = placeData?.name || placeData?.title || "장소명";
+      console.log("설정할 장소명:", newPlaceName);
+
       updateFormState({ placeName: newPlaceName });
     } catch (error) {
       console.error("장소 정보 로드 중 오류:", error);
@@ -112,34 +142,73 @@ const ReviewWriteForm = () => {
 
   useEffect(() => {
     loadPlaceInfo();
-  }, [finalContentId]);
+  }, [finalContentId, accessToken]);
 
   // 리뷰 저장
   const handleSaveReview = async () => {
-    if (!validateForm()) return;
+    console.log("리뷰 저장 시작");
+    console.log("유효성 검사 결과:", validateForm());
+    console.log("accessToken 존재:", !!accessToken);
+    console.log("formState:", formState);
+    console.log("selectedFiles:", selectedFiles);
+
+    if (!validateForm() || !accessToken) {
+      console.log("유효성 검사 실패 또는 accessToken 없음");
+      return;
+    }
+
     try {
       updateFormState({ isLoading: true });
-      const url = new URL(
-        `${import.meta.env.VITE_API_BASE_URL}api/review/${finalContentId}`
-      );
-      url.searchParams.append("score", formState.rating.toString());
-      url.searchParams.append("content", formState.reviewText.trim());
+
+      // API URL 구성
+      const url = `${import.meta.env.VITE_API_BASE_URL}api/review/${finalContentId}`;
+
+      // score를 0.5~5.0 범위로 변환 (별점 1~5를 0.5~5.0으로)
+      const score = Math.max(0.5, Math.min(5.0, formState.rating));
+
+      console.log("요청 URL:", url);
+      console.log("score:", score);
+      console.log("content:", formState.reviewText.trim());
 
       const formData = new FormData();
-      selectedFiles
-        .slice(0, 3)
-        .forEach((file) => formData.append("images", file));
 
-      const response = await fetch(url.toString(), {
+      // FormData에 모든 파라미터 추가
+      formData.append("score", score.toString());
+      formData.append("content", formState.reviewText.trim());
+
+      // 이미지 필수 파라미터로 추가
+      selectedFiles.forEach((file, index) => {
+        console.log(`이미지 ${index + 1}:`, file.name, file.size);
+        formData.append("images", file);
+      });
+
+      console.log("FormData 내용:");
+      for (let [key, value] of formData.entries()) {
+        console.log(key, value);
+      }
+
+      const response = await fetch(url, {
         method: "POST",
         credentials: "include",
         headers: {
-          Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
+          Authorization: `Bearer ${accessToken}`,
+          // Content-Type은 FormData를 사용할 때 자동으로 설정되므로 제거
         },
         body: formData,
       });
 
-      if (!response.ok) throw new Error(`리뷰 저장 실패: ${response.status}`);
+      console.log("API 응답 상태:", response.status);
+      console.log("API 응답 헤더:", response.headers);
+
+      if (!response.ok) {
+        const errorText = await response.text();
+        console.error("리뷰 저장 실패 - 응답:", errorText);
+        throw new Error(`리뷰 저장 실패: ${response.status} - ${errorText}`);
+      }
+
+      const responseData = await response.json();
+      console.log("리뷰 저장 성공 - 응답:", responseData);
+
       alert("리뷰가 성공적으로 저장되었습니다.");
       navigate("/myreview");
     } catch (error) {
@@ -162,6 +231,12 @@ const ReviewWriteForm = () => {
     if (formState.errors.reviewText) updateErrors({ reviewText: "" });
   };
 
+  // 이미지 변경 핸들러
+  const handleImageChange = (files: File[]) => {
+    setSelectedFiles(files);
+    if (formState.errors.images) updateErrors({ images: "" });
+  };
+
   return (
     <main className="flex-1 px-16 py-12">
       <div className="flex flex-col text-[20px] gap-[9px]">
@@ -200,15 +275,22 @@ const ReviewWriteForm = () => {
 
       <ImageUploadSection
         selectedFiles={selectedFiles}
-        onFileSelect={setSelectedFiles}
+        onFileSelect={handleImageChange}
         onFileRemove={(index) =>
           setSelectedFiles((prev) => prev.filter((_, i) => i !== index))
         }
         onSave={handleSubmit}
         onCancel={() => updateModalState({ showCancelModal: true })}
         maxFiles={3}
+        minFiles={1} // 최소 1개 이미지 필수
       />
 
+      {formState.errors.images && (
+        <div className="mt-2 text-red-500 text-sm">
+          {formState.errors.images}
+        </div>
+      )}
+
       <ConfirmModal
         isOpen={modalState.showConfirmModal}
         onClose={() => updateModalState({ showConfirmModal: false })}
diff --git a/src/components/mypage/WishPlaces.tsx b/src/components/mypage/WishPlaces.tsx
index 22719a9..34df5b1 100644
--- a/src/components/mypage/WishPlaces.tsx
+++ b/src/components/mypage/WishPlaces.tsx
@@ -1,6 +1,7 @@
 import { useEffect, useState } from "react";
 import WishCard from "@/components/mypage/WishCard";
 import Pagination from "@/components/mypage/Pagination";
+import { useAuthStore } from "@/stores/authStore";
 
 interface WishItem {
   id: number;
@@ -14,6 +15,7 @@ interface WishItem {
 }
 
 const WishPlaces = () => {
+  const { accessToken } = useAuthStore();
   const [currentPage, setCurrentPage] = useState(1);
   const [wishList, setWishList] = useState<WishItem[]>([]);
   const [isLoading, setIsLoading] = useState(false);
@@ -46,7 +48,7 @@ const WishPlaces = () => {
         credentials: "include",
         headers: {
           "Content-Type": "application/json",
-          Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
+          Authorization: `Bearer ${accessToken}`,
         },
       });
 
@@ -335,11 +337,11 @@ const WishPlaces = () => {
       const response = await fetch(
         `${import.meta.env.VITE_API_BASE_URL}api/content/wish-check?contentId=${id}`,
         {
-          method: "POST",
+          method: "POST", // DELETE에서 POST로 변경
           credentials: "include",
           headers: {
             "Content-Type": "application/json",
-            Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3IiwiZW1haWwiOiJnbG9yaWEwMjA1MTBAZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiLsoJXtlZgiLCJpYXQiOjE3NTQzODQ4MDQsImV4cCI6MTc2MjE2MDgwNH0.4WXOk_zOhE8ndDtB3zXfwKNi_1Lapv3Z1-seMIgv8fg`,
+            Authorization: `Bearer ${accessToken}`,
           },
         }
       );
@@ -395,7 +397,7 @@ const WishPlaces = () => {
             image={item.image}
             imageUrl={item.imageUrl}
             description={item.description}
-            isWished={true}
+            isWished={true} // 찜한 장소 페이지이므로 항상 true
             onToggleWish={handleToggleWish}
           />
         ))}
diff --git a/src/components/placeDetailPage/MapSection.tsx b/src/components/placeDetailPage/MapSection.tsx
index 3c3ba73..c58afc5 100644
--- a/src/components/placeDetailPage/MapSection.tsx
+++ b/src/components/placeDetailPage/MapSection.tsx
@@ -1,73 +1,52 @@
 import { useEffect, useRef } from "react";
 
-interface Props {
-  title: string;
-  lat: number;
-  lng: number;
-}
-
 declare global {
   interface Window {
     kakao: any;
   }
 }
 
+interface Props {
+  title: string;
+  lat: number;
+  lng: number;
+}
+
 const MapSection = ({ title, lat, lng }: Props) => {
   const mapRef = useRef<HTMLDivElement | null>(null);
   const mapInstance = useRef<any | null>(null);
 
   useEffect(() => {
-    const loadKakaoMap = () => {
-      const { kakao } = window;
-
-      if (!kakao || !mapRef.current || mapInstance.current) return;
-
-      try {
-        kakao.maps.load(() => {
-          const options = {
-            center: new kakao.maps.LatLng(lat, lng),
-            level: 3,
-          };
-
-          mapInstance.current = new kakao.maps.Map(mapRef.current, options);
-
-          const markerPosition = new kakao.maps.LatLng(lat, lng);
+    const { kakao } = window;
 
-          const marker = new kakao.maps.Marker({
-            position: markerPosition,
-          });
+    if (!kakao || !mapRef.current || mapInstance.current) return;
 
-          marker.setMap(mapInstance.current);
+    kakao.maps.load(() => {
+      const options = {
+        center: new kakao.maps.LatLng(lat, lng),
+        level: 3,
+      };
+      mapInstance.current = new kakao.maps.Map(mapRef.current, options);
 
-          kakao.maps.event.addListener(mapInstance.current, "click", () => {
-            window.open(`https://map.kakao.com/link/to/${title},${lat},${lng}`);
-          });
-        });
-      } catch (error) {
-        console.error("Kakao Map 로딩 실패:", error);
-      }
-    };
+      const markerPosition = new kakao.maps.LatLng(lat, lng);
 
-    // SDK가 로드될 때까지 대기
-    const checkKakaoSDK = () => {
-      if (window.kakao) {
-        loadKakaoMap();
-      } else {
-        // SDK가 아직 로드되지 않았으면 잠시 후 다시 시도
-        setTimeout(checkKakaoSDK, 100);
-      }
-    };
+      const marker = new kakao.maps.Marker({
+        position: markerPosition,
+      });
 
-    checkKakaoSDK();
+      marker.setMap(mapInstance.current);
 
-    return () => {
-      if (mapInstance.current) {
-        mapInstance.current = null;
-      }
-    };
+      kakao.maps.event.addListener(mapInstance.current, "click", () => {
+        window.open(`https://map.kakao.com/link/to/${title},${lat},${lng}`);
+      });
+    });
   }, [title, lat, lng]);
 
-  return <div ref={mapRef} className="w-full h-[202px] mb-5"></div>;
+  return (
+    <section className="w-full h-fit pb-[44px]">
+      <div ref={mapRef} className="w-full h-[202px]"></div>
+    </section>
+  );
 };
 
 export default MapSection;
diff --git a/src/configs/searchConstants.ts b/src/configs/searchConstants.ts
index f3f67b4..581babb 100644
--- a/src/configs/searchConstants.ts
+++ b/src/configs/searchConstants.ts
@@ -1,12 +1,12 @@
 export const regions = ["서울", "부산", "대구", "인천", "광주", "대전", "울산"];
 
 export const categories = [
-  "숙박",
-  "음식점",
+  "문화시설",
   "관광지",
   "행사/공연/축제",
+  "숙박",
+  "음식점",
   "쇼핑",
-  "문화시설",
   "레포츠",
 ];
 
diff --git a/src/configs/svgOptions.ts b/src/configs/svgOptions.ts
index f9c3f78..3f0031d 100644
--- a/src/configs/svgOptions.ts
+++ b/src/configs/svgOptions.ts
@@ -1 +1,13 @@
-export type IconOptions = "star" | "vector";
+export type IconOptions =
+  | "star"
+  | "vector"
+  | "thumbnailShare"
+  | "thumbnailHeart"
+  | "thumbnailHeartClicked"
+  | "placedetailHeart"
+  | "placedetailView"
+  | "placedetailShare"
+  | "sortCheck"
+  | "checkDefault"
+  | "checkChecked"
+  | "scrollTop";
diff --git a/src/stores/authStore.ts b/src/stores/authStore.ts
index 9893ccc..98924ab 100644
--- a/src/stores/authStore.ts
+++ b/src/stores/authStore.ts
@@ -19,3 +19,5 @@ export const useAuthStore = create<AuthState>((set) => ({
   setUser: (user) => set({ user }),
   logout: () => set({ accessToken: null, user: null }),
 }));
+
+// 프로필 기능 지우기
